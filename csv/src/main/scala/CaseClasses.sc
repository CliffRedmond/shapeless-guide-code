// algebraic type// sum type -> each 'case' adds another type// sealed -> all definitions in this compilation unitsealed abstract class Petcase class Cat(name: String) extends Petcase class Dog(name: String) extends Petcase class Seal(name: String) extends Petdef sayHi(pet :Pet): String =  pet match {    case Cat(n) => "Meow " + n + "!"    case Dog(n) => s"Woof $n!"  }def sayHi2(pet :Pet): String =  pet match {    case Cat(n) => "Meow " + n + "!"    case Dog(n) if n equalsIgnoreCase "Wilbur" =>      "Felicitations Sir Wilbur"    case Dog(n) => s"Woof $n!"    case _ => "You're no pet I know"  }val pet: Pet = Dog("Bowser")val greeting = sayHi(pet)val poshPet: Pet = Dog("Wilbur")val poshPetGreeting = sayHi(poshPet)//val hydroPhillicPet = Seal("Hoover")//val hello = sayHi(hydroPhillicPet)